{"errors": [], "interfile_languages_used": [], "paths": {"scanned": ["app.js"]}, "results": [{"check_id": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection", "end": {"col": 120, "line": 11, "offset": 403}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 120, "line": 11, "offset": 403}, "path": "app.js", "start": {"col": 53, "line": 11, "offset": 336}}, "\"SELECT * FROM `users`\" + \" WHERE id = '\" + req.query.message + \"'\""]], "taint_source": ["CliLoc", [{"end": {"col": 106, "line": 11, "offset": 389}, "path": "app.js", "start": {"col": 97, "line": 11, "offset": 380}}, "req.query"]]}, "engine_kind": "OSS", "fingerprint": "3448c43db2a0dc8fef75e2878d8b265dfdc93b7f986e0d82cc5494fcd64517d703973d51646a27eab37a36c31042ef9634439987b560e4804898fd56437e939f_0", "is_ignored": false, "lines": "  const [results, metadata] = await sequelize.query(\"SELECT * FROM `users`\" + \" WHERE id = '\" + req.query.message + \"'\");", "message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "interfile": true, "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://sequelize.org/docs/v6/core-concepts/raw-queries/#replacements"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 22085, "rule_id": "yyU0GX", "rv_id": 834186, "url": "https://semgrep.dev/playground/r/w8TAxwx/javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection", "version_id": "w8TAxwx"}}, "shortlink": "https://sg.run/gjoe", "source": "https://semgrep.dev/r/javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection", "subcategory": ["vuln"], "technology": ["express"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "get", "end": {"col": 4, "line": 1, "offset": 3}, "start": {"col": 1, "line": 1, "offset": 0}}, "$APP": {"abstract_content": "app", "end": {"col": 5, "line": 9, "offset": 213}, "propagated_value": {"svalue_abstract_content": "express()", "svalue_end": {"col": 22, "line": 2, "offset": 57}, "svalue_start": {"col": 13, "line": 2, "offset": 48}}, "start": {"col": 2, "line": 9, "offset": 210}}, "$METHOD": {"abstract_content": "get", "end": {"col": 9, "line": 9, "offset": 217}, "start": {"col": 6, "line": 9, "offset": 214}}, "$QUERY": {"abstract_content": "\"SELECT * FROM `users`\"+\" WHERE id = '\"+req.query.message+\"'\"", "end": {"col": 120, "line": 11, "offset": 403}, "start": {"col": 53, "line": 11, "offset": 336}}, "$REQ": {"abstract_content": "req", "end": {"col": 100, "line": 11, "offset": 383}, "start": {"col": 97, "line": 11, "offset": 380}}, "$RES": {"abstract_content": "res", "end": {"col": 35, "line": 9, "offset": 243}, "start": {"col": 32, "line": 9, "offset": 240}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "app.js", "start": {"col": 53, "line": 11, "offset": 336}}, {"check_id": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 114, "line": 11, "offset": 397}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 114, "line": 11, "offset": 397}, "path": "app.js", "start": {"col": 97, "line": 11, "offset": 380}}, "req.query.message"]], "taint_source": ["CliLoc", [{"end": {"col": 106, "line": 11, "offset": 389}, "path": "app.js", "start": {"col": 97, "line": 11, "offset": 380}}, "req.query"]]}, "engine_kind": "OSS", "fingerprint": "f22683ebaffe3a5fdd0601661bc392fd1668ed4e441480b6c390cf6a913fc7ddbc63226f4a4c079a2d72ba475e6b9fce84e186fca3bf8d2dc69a4cfbd33c649b_0", "is_ignored": false, "lines": "  const [results, metadata] = await sequelize.query(\"SELECT * FROM `users`\" + \" WHERE id = '\" + req.query.message + \"'\");", "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 14715, "rule_id": "NbUNpr", "rv_id": 834108, "url": "https://semgrep.dev/playground/r/DkTG0jd/javascript.express.security.injection.tainted-sql-string.tainted-sql-string", "version_id": "DkTG0jd"}}, "shortlink": "https://sg.run/66ZL", "source": "https://semgrep.dev/r/javascript.express.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["vuln"], "technology": ["express"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "SELECT", "end": {"col": 7, "line": 1, "offset": 6}, "start": {"col": 1, "line": 1, "offset": 0}}, "$EXPR": {"abstract_content": "req.query.message", "end": {"col": 114, "line": 11, "offset": 397}, "start": {"col": 97, "line": 11, "offset": 380}}, "$REQ": {"abstract_content": "req", "end": {"col": 100, "line": 11, "offset": 383}, "start": {"col": 97, "line": 11, "offset": 380}}, "$SQLSTR": {"abstract_content": "\"SELECT * FROM `users`\"", "end": {"col": 76, "line": 11, "offset": 359}, "start": {"col": 53, "line": 11, "offset": 336}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "app.js", "start": {"col": 97, "line": 11, "offset": 380}}, {"check_id": "javascript.express.security.audit.xss.direct-response-write.direct-response-write", "end": {"col": 19, "line": 12, "offset": 425}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "results", "location": {"end": {"col": 17, "line": 11, "offset": 300}, "path": "app.js", "start": {"col": 10, "line": 11, "offset": 293}}}], "taint_sink": ["CliLoc", [{"end": {"col": 19, "line": 12, "offset": 425}, "path": "app.js", "start": {"col": 12, "line": 12, "offset": 418}}, "results"]], "taint_source": ["CliLoc", [{"end": {"col": 106, "line": 11, "offset": 389}, "path": "app.js", "start": {"col": 97, "line": 11, "offset": 380}}, "req.query"]]}, "engine_kind": "OSS", "fingerprint": "c4c8056b76ffabe9b5af6f47606a1cf0d44137158e217edeaa7d14851208d76503a4c073009c760517d8c51acb7fd75b2e2f1e69e200c47698a2429182f497d9_0", "is_ignored": false, "lines": "  res.send(results)", "message": "Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "interfile": true, "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9277, "rule_id": "3qUPA1", "rv_id": 834081, "url": "https://semgrep.dev/playground/r/rxTDzKl/javascript.express.security.audit.xss.direct-response-write.direct-response-write", "version_id": "rxTDzKl"}}, "shortlink": "https://sg.run/vzGl", "source": "https://semgrep.dev/r/javascript.express.security.audit.xss.direct-response-write.direct-response-write", "subcategory": ["vuln"], "technology": ["express"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$1": {"abstract_content": "get", "end": {"col": 4, "line": 1, "offset": 3}, "start": {"col": 1, "line": 1, "offset": 0}}, "$APP": {"abstract_content": "app", "end": {"col": 5, "line": 9, "offset": 213}, "propagated_value": {"svalue_abstract_content": "express()", "svalue_end": {"col": 22, "line": 2, "offset": 57}, "svalue_start": {"col": 13, "line": 2, "offset": 48}}, "start": {"col": 2, "line": 9, "offset": 210}}, "$ARG": {"abstract_content": "results", "end": {"col": 19, "line": 12, "offset": 425}, "start": {"col": 12, "line": 12, "offset": 418}}, "$METHOD": {"abstract_content": "get", "end": {"col": 9, "line": 9, "offset": 217}, "start": {"col": 6, "line": 9, "offset": 214}}, "$REQ": {"abstract_content": "req", "end": {"col": 100, "line": 11, "offset": 383}, "start": {"col": 97, "line": 11, "offset": 380}}, "$RES": {"abstract_content": "res", "end": {"col": 35, "line": 9, "offset": 243}, "start": {"col": 32, "line": 9, "offset": 240}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "app.js", "start": {"col": 12, "line": 12, "offset": 418}}, {"check_id": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 67, "line": 17, "offset": 574}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 67, "line": 17, "offset": 574}, "path": "app.js", "start": {"col": 50, "line": 17, "offset": 557}}, "req.query.message"]], "taint_source": ["CliLoc", [{"end": {"col": 59, "line": 17, "offset": 566}, "path": "app.js", "start": {"col": 50, "line": 17, "offset": 557}}, "req.query"]]}, "engine_kind": "OSS", "fingerprint": "765a7d2e77ca0810b4098593f887bb12605ef5903a314e8d76dc01d54277c4a76cee8991d508be1c4d68ee4ca135e97f2ba5d245023213c44547307e319f617e_0", "is_ignored": false, "lines": "  let query = `SELECT * FROM users WHERE id = '${req.query.message}'`", "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 14715, "rule_id": "NbUNpr", "rv_id": 834108, "url": "https://semgrep.dev/playground/r/DkTG0jd/javascript.express.security.injection.tainted-sql-string.tainted-sql-string", "version_id": "DkTG0jd"}}, "shortlink": "https://sg.run/66ZL", "source": "https://semgrep.dev/r/javascript.express.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["vuln"], "technology": ["express"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "SELECT", "end": {"col": 7, "line": 1, "offset": 6}, "start": {"col": 1, "line": 1, "offset": 0}}, "$EXPR": {"abstract_content": "req.query.message", "end": {"col": 67, "line": 17, "offset": 574}, "start": {"col": 50, "line": 17, "offset": 557}}, "$REQ": {"abstract_content": "req", "end": {"col": 53, "line": 17, "offset": 560}, "start": {"col": 50, "line": 17, "offset": 557}}, "$SQLSTR": {"abstract_content": "SELECT * FROM users WHERE id = '", "end": {"col": 48, "line": 17, "offset": 555}, "start": {"col": 16, "line": 17, "offset": 523}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "app.js", "start": {"col": 50, "line": 17, "offset": 557}}, {"check_id": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection", "end": {"col": 58, "line": 18, "offset": 636}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "query", "location": {"end": {"col": 12, "line": 17, "offset": 519}, "path": "app.js", "start": {"col": 7, "line": 17, "offset": 514}}}], "taint_sink": ["CliLoc", [{"end": {"col": 58, "line": 18, "offset": 636}, "path": "app.js", "start": {"col": 53, "line": 18, "offset": 631}}, "query"]], "taint_source": ["CliLoc", [{"end": {"col": 59, "line": 17, "offset": 566}, "path": "app.js", "start": {"col": 50, "line": 17, "offset": 557}}, "req.query"]]}, "engine_kind": "OSS", "fingerprint": "3a09903b1dc028f5d4b9d2b311a984c8133b12ff578d413e4dcb96fba962b6cb77536eba599ce8302cf8d8a2775a005cd71f9e6f854813e92f5ae2f498e56b85_0", "is_ignored": false, "lines": "  const [results, metadata] = await sequelize.query(query);", "message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "interfile": true, "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://sequelize.org/docs/v6/core-concepts/raw-queries/#replacements"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 22085, "rule_id": "yyU0GX", "rv_id": 834186, "url": "https://semgrep.dev/playground/r/w8TAxwx/javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection", "version_id": "w8TAxwx"}}, "shortlink": "https://sg.run/gjoe", "source": "https://semgrep.dev/r/javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection", "subcategory": ["vuln"], "technology": ["express"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "get", "end": {"col": 4, "line": 1, "offset": 3}, "start": {"col": 1, "line": 1, "offset": 0}}, "$APP": {"abstract_content": "app", "end": {"col": 4, "line": 15, "offset": 437}, "propagated_value": {"svalue_abstract_content": "express()", "svalue_end": {"col": 22, "line": 2, "offset": 57}, "svalue_start": {"col": 13, "line": 2, "offset": 48}}, "start": {"col": 1, "line": 15, "offset": 434}}, "$METHOD": {"abstract_content": "get", "end": {"col": 8, "line": 15, "offset": 441}, "start": {"col": 5, "line": 15, "offset": 438}}, "$QUERY": {"abstract_content": "query", "end": {"col": 58, "line": 18, "offset": 636}, "propagated_value": {"svalue_abstract_content": "`SELECT * FROM users WHERE id = 'req.query.message'", "svalue_end": {"col": 69, "line": 17, "offset": 576}, "svalue_start": {"col": 15, "line": 17, "offset": 522}}, "start": {"col": 53, "line": 18, "offset": 631}}, "$REQ": {"abstract_content": "req", "end": {"col": 53, "line": 17, "offset": 560}, "start": {"col": 50, "line": 17, "offset": 557}}, "$RES": {"abstract_content": "res", "end": {"col": 34, "line": 15, "offset": 467}, "start": {"col": 31, "line": 15, "offset": 464}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "app.js", "start": {"col": 53, "line": 18, "offset": 631}}, {"check_id": "javascript.express.security.audit.xss.direct-response-write.direct-response-write", "end": {"col": 19, "line": 19, "offset": 658}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "results", "location": {"end": {"col": 17, "line": 11, "offset": 300}, "path": "app.js", "start": {"col": 10, "line": 11, "offset": 293}}}], "taint_sink": ["CliLoc", [{"end": {"col": 19, "line": 19, "offset": 658}, "path": "app.js", "start": {"col": 12, "line": 19, "offset": 651}}, "results"]], "taint_source": ["CliLoc", [{"end": {"col": 106, "line": 11, "offset": 389}, "path": "app.js", "start": {"col": 97, "line": 11, "offset": 380}}, "req.query"]]}, "engine_kind": "OSS", "fingerprint": "c4c8056b76ffabe9b5af6f47606a1cf0d44137158e217edeaa7d14851208d76503a4c073009c760517d8c51acb7fd75b2e2f1e69e200c47698a2429182f497d9_1", "is_ignored": false, "lines": "  res.send(results)", "message": "Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "interfile": true, "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9277, "rule_id": "3qUPA1", "rv_id": 834081, "url": "https://semgrep.dev/playground/r/rxTDzKl/javascript.express.security.audit.xss.direct-response-write.direct-response-write", "version_id": "rxTDzKl"}}, "shortlink": "https://sg.run/vzGl", "source": "https://semgrep.dev/r/javascript.express.security.audit.xss.direct-response-write.direct-response-write", "subcategory": ["vuln"], "technology": ["express"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$1": {"abstract_content": "get", "end": {"col": 4, "line": 1, "offset": 3}, "start": {"col": 1, "line": 1, "offset": 0}}, "$APP": {"abstract_content": "app", "end": {"col": 5, "line": 9, "offset": 213}, "propagated_value": {"svalue_abstract_content": "express()", "svalue_end": {"col": 22, "line": 2, "offset": 57}, "svalue_start": {"col": 13, "line": 2, "offset": 48}}, "start": {"col": 2, "line": 9, "offset": 210}}, "$ARG": {"abstract_content": "results", "end": {"col": 19, "line": 19, "offset": 658}, "start": {"col": 12, "line": 19, "offset": 651}}, "$METHOD": {"abstract_content": "get", "end": {"col": 9, "line": 9, "offset": 217}, "start": {"col": 6, "line": 9, "offset": 214}}, "$REQ": {"abstract_content": "req", "end": {"col": 100, "line": 11, "offset": 383}, "start": {"col": 97, "line": 11, "offset": 380}}, "$RES": {"abstract_content": "res", "end": {"col": 35, "line": 9, "offset": 243}, "start": {"col": 32, "line": 9, "offset": 240}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "app.js", "start": {"col": 12, "line": 19, "offset": 651}}, {"check_id": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 41, "line": 25, "offset": 833}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 41, "line": 25, "offset": 833}, "path": "app.js", "start": {"col": 24, "line": 25, "offset": 816}}, "req.query.message"]], "taint_source": ["CliLoc", [{"end": {"col": 33, "line": 25, "offset": 825}, "path": "app.js", "start": {"col": 24, "line": 25, "offset": 816}}, "req.query"]]}, "engine_kind": "OSS", "fingerprint": "dd0bdcaa88a99f41a01133df00f06fdef9f85cd897071e948df22d205347fe2ee4c2c2e0ee00502a6e5c248cf6baf65cc09fb03b4f9ea093ba5a3276eac67f8a_0", "is_ignored": false, "lines": "  query = query.concat(req.query.message)", "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 14715, "rule_id": "NbUNpr", "rv_id": 834108, "url": "https://semgrep.dev/playground/r/DkTG0jd/javascript.express.security.injection.tainted-sql-string.tainted-sql-string", "version_id": "DkTG0jd"}}, "shortlink": "https://sg.run/66ZL", "source": "https://semgrep.dev/r/javascript.express.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["vuln"], "technology": ["express"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "SELECT", "end": {"col": 7, "line": 1, "offset": 6}, "start": {"col": 1, "line": 1, "offset": 0}}, "$EXPR": {"abstract_content": "req.query.message", "end": {"col": 41, "line": 25, "offset": 833}, "start": {"col": 24, "line": 25, "offset": 816}}, "$REQ": {"abstract_content": "req", "end": {"col": 27, "line": 25, "offset": 819}, "start": {"col": 24, "line": 25, "offset": 816}}, "$SQLSTR": {"abstract_content": "SELECT * FROM `users` WHERE id = '", "end": {"col": 50, "line": 23, "offset": 757}, "start": {"col": 16, "line": 23, "offset": 723}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "app.js", "start": {"col": 24, "line": 25, "offset": 816}}, {"check_id": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection", "end": {"col": 58, "line": 27, "offset": 922}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "query", "location": {"end": {"col": 8, "line": 25, "offset": 800}, "path": "app.js", "start": {"col": 3, "line": 25, "offset": 795}}}], "taint_sink": ["CliLoc", [{"end": {"col": 58, "line": 27, "offset": 922}, "path": "app.js", "start": {"col": 53, "line": 27, "offset": 917}}, "query"]], "taint_source": ["CliLoc", [{"end": {"col": 33, "line": 25, "offset": 825}, "path": "app.js", "start": {"col": 24, "line": 25, "offset": 816}}, "req.query"]]}, "engine_kind": "OSS", "fingerprint": "3a09903b1dc028f5d4b9d2b311a984c8133b12ff578d413e4dcb96fba962b6cb77536eba599ce8302cf8d8a2775a005cd71f9e6f854813e92f5ae2f498e56b85_1", "is_ignored": false, "lines": "  const [results, metadata] = await sequelize.query(query);", "message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "interfile": true, "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://sequelize.org/docs/v6/core-concepts/raw-queries/#replacements"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 22085, "rule_id": "yyU0GX", "rv_id": 834186, "url": "https://semgrep.dev/playground/r/w8TAxwx/javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection", "version_id": "w8TAxwx"}}, "shortlink": "https://sg.run/gjoe", "source": "https://semgrep.dev/r/javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection", "subcategory": ["vuln"], "technology": ["express"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "get", "end": {"col": 4, "line": 1, "offset": 3}, "start": {"col": 1, "line": 1, "offset": 0}}, "$APP": {"abstract_content": "app", "end": {"col": 4, "line": 22, "offset": 670}, "propagated_value": {"svalue_abstract_content": "express()", "svalue_end": {"col": 22, "line": 2, "offset": 57}, "svalue_start": {"col": 13, "line": 2, "offset": 48}}, "start": {"col": 1, "line": 22, "offset": 667}}, "$METHOD": {"abstract_content": "get", "end": {"col": 8, "line": 22, "offset": 674}, "start": {"col": 5, "line": 22, "offset": 671}}, "$QUERY": {"abstract_content": "query", "end": {"col": 58, "line": 27, "offset": 922}, "propagated_value": {"svalue_abstract_content": "query.concat(\"'\")", "svalue_end": {"col": 28, "line": 26, "offset": 863}, "svalue_start": {"col": 11, "line": 26, "offset": 846}}, "start": {"col": 53, "line": 27, "offset": 917}}, "$REQ": {"abstract_content": "req", "end": {"col": 27, "line": 25, "offset": 819}, "start": {"col": 24, "line": 25, "offset": 816}}, "$RES": {"abstract_content": "res", "end": {"col": 34, "line": 22, "offset": 700}, "start": {"col": 31, "line": 22, "offset": 697}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "app.js", "start": {"col": 53, "line": 27, "offset": 917}}, {"check_id": "javascript.express.security.audit.xss.direct-response-write.direct-response-write", "end": {"col": 19, "line": 28, "offset": 944}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "results", "location": {"end": {"col": 17, "line": 11, "offset": 300}, "path": "app.js", "start": {"col": 10, "line": 11, "offset": 293}}}], "taint_sink": ["CliLoc", [{"end": {"col": 19, "line": 28, "offset": 944}, "path": "app.js", "start": {"col": 12, "line": 28, "offset": 937}}, "results"]], "taint_source": ["CliLoc", [{"end": {"col": 106, "line": 11, "offset": 389}, "path": "app.js", "start": {"col": 97, "line": 11, "offset": 380}}, "req.query"]]}, "engine_kind": "OSS", "fingerprint": "c4c8056b76ffabe9b5af6f47606a1cf0d44137158e217edeaa7d14851208d76503a4c073009c760517d8c51acb7fd75b2e2f1e69e200c47698a2429182f497d9_2", "is_ignored": false, "lines": "  res.send(results)", "message": "Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "interfile": true, "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9277, "rule_id": "3qUPA1", "rv_id": 834081, "url": "https://semgrep.dev/playground/r/rxTDzKl/javascript.express.security.audit.xss.direct-response-write.direct-response-write", "version_id": "rxTDzKl"}}, "shortlink": "https://sg.run/vzGl", "source": "https://semgrep.dev/r/javascript.express.security.audit.xss.direct-response-write.direct-response-write", "subcategory": ["vuln"], "technology": ["express"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$1": {"abstract_content": "get", "end": {"col": 4, "line": 1, "offset": 3}, "start": {"col": 1, "line": 1, "offset": 0}}, "$APP": {"abstract_content": "app", "end": {"col": 5, "line": 9, "offset": 213}, "propagated_value": {"svalue_abstract_content": "express()", "svalue_end": {"col": 22, "line": 2, "offset": 57}, "svalue_start": {"col": 13, "line": 2, "offset": 48}}, "start": {"col": 2, "line": 9, "offset": 210}}, "$ARG": {"abstract_content": "results", "end": {"col": 19, "line": 28, "offset": 944}, "start": {"col": 12, "line": 28, "offset": 937}}, "$METHOD": {"abstract_content": "get", "end": {"col": 9, "line": 9, "offset": 217}, "start": {"col": 6, "line": 9, "offset": 214}}, "$REQ": {"abstract_content": "req", "end": {"col": 100, "line": 11, "offset": 383}, "start": {"col": 97, "line": 11, "offset": 380}}, "$RES": {"abstract_content": "res", "end": {"col": 35, "line": 9, "offset": 243}, "start": {"col": 32, "line": 9, "offset": 240}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "app.js", "start": {"col": 12, "line": 28, "offset": 937}}, {"check_id": "javascript.express.security.audit.xss.direct-response-write.direct-response-write", "end": {"col": 45, "line": 34, "offset": 1068}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 45, "line": 34, "offset": 1068}, "path": "app.js", "start": {"col": 14, "line": 34, "offset": 1037}}, "\"message: \" + req.query.message"]], "taint_source": ["CliLoc", [{"end": {"col": 37, "line": 34, "offset": 1060}, "path": "app.js", "start": {"col": 28, "line": 34, "offset": 1051}}, "req.query"]]}, "engine_kind": "OSS", "fingerprint": "5356582787a1709e9572b7883bdcbce265893523e25358ce4710c643433f7ffa87034b2b0f8f5e579f14a6807e40e7632e41bdd8926031c75b93241a9676ea9a_0", "is_ignored": false, "lines": "    res.send(\"message: \" + req.query.message);", "message": "Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "interfile": true, "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9277, "rule_id": "3qUPA1", "rv_id": 834081, "url": "https://semgrep.dev/playground/r/rxTDzKl/javascript.express.security.audit.xss.direct-response-write.direct-response-write", "version_id": "rxTDzKl"}}, "shortlink": "https://sg.run/vzGl", "source": "https://semgrep.dev/r/javascript.express.security.audit.xss.direct-response-write.direct-response-write", "subcategory": ["vuln"], "technology": ["express"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$1": {"abstract_content": "get", "end": {"col": 4, "line": 1, "offset": 3}, "start": {"col": 1, "line": 1, "offset": 0}}, "$APP": {"abstract_content": "app", "end": {"col": 4, "line": 32, "offset": 958}, "propagated_value": {"svalue_abstract_content": "express()", "svalue_end": {"col": 22, "line": 2, "offset": 57}, "svalue_start": {"col": 13, "line": 2, "offset": 48}}, "start": {"col": 1, "line": 32, "offset": 955}}, "$ARG": {"abstract_content": "\"message: \"+req.query.message", "end": {"col": 45, "line": 34, "offset": 1068}, "start": {"col": 14, "line": 34, "offset": 1037}}, "$METHOD": {"abstract_content": "get", "end": {"col": 8, "line": 32, "offset": 962}, "start": {"col": 5, "line": 32, "offset": 959}}, "$REQ": {"abstract_content": "req", "end": {"col": 31, "line": 34, "offset": 1054}, "start": {"col": 28, "line": 34, "offset": 1051}}, "$RES": {"abstract_content": "res", "end": {"col": 31, "line": 32, "offset": 985}, "start": {"col": 28, "line": 32, "offset": 982}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "app.js", "start": {"col": 14, "line": 34, "offset": 1037}}], "skipped_rules": [], "version": "1.83.0"} 